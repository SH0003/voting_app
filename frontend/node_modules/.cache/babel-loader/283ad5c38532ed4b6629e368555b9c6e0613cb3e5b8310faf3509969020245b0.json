{"ast":null,"code":"var _jsxFileName = \"C:\\\\voting_appv1\\\\voting_app\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { ethers } from \"ethers\";\nimport { contractAbi, contractAddress } from \"./Constant/constant\";\nimport Login from \"./Components/Login\";\nimport Finished from \"./Components/Finished\";\nimport Connected from \"./Components/Connected\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst pinataApiKey = \"de27f723de47dc491f1c\";\nconst pinataSecretApiKey = \"e01beeb95d3172c3bac68b551f812d6649063ab581b42dc1040e0048f78496ee\";\nfunction App() {\n  _s();\n  const [provider, setProvider] = useState(null);\n  const [account, setAccount] = useState(null);\n  const [isConnected, setIsConnected] = useState(false);\n  const [votingStatus, setVotingStatus] = useState(true);\n  const [remainingTime, setRemainingTime] = useState(\"\");\n  const [candidates, setCandidates] = useState([]);\n  const [number, setNumber] = useState(\"\");\n  const [isAllowedToVote, setIsAllowedToVote] = useState(true);\n  const [isAdmin, setIsAdmin] = useState(false);\n  const [showPopup, setShowPopup] = useState(false);\n  const [newCandidateName, setNewCandidateName] = useState(\"\");\n  const [newCandidateImage, setNewCandidateImage] = useState(null);\n  useEffect(() => {\n    getCandidates();\n    getRemainingTime();\n    getCurrentStatus();\n    checkIfAdmin();\n    if (window.ethereum) {\n      window.ethereum.on(\"accountsChanged\", handleAccountsChanged);\n    }\n    return () => {\n      if (window.ethereum) {\n        window.ethereum.removeListener(\"accountsChanged\", handleAccountsChanged);\n      }\n    };\n  }, []);\n  async function vote(candidateIndex) {\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    await provider.send(\"eth_requestAccounts\", []);\n    const signer = provider.getSigner();\n    const contractInstance = new ethers.Contract(contractAddress, contractAbi, signer);\n    const tx = await contractInstance.vote(candidateIndex);\n    await tx.wait();\n    checkIfCanVote();\n  }\n  async function addCandidate() {\n    if (!newCandidateName || !newCandidateImage) {\n      return alert(\"Please enter candidate name and select an image\");\n    }\n    try {\n      const formData = new FormData();\n      formData.append(\"file\", newCandidateImage);\n      const metadata = JSON.stringify({\n        name: newCandidateImage.name,\n        keyvalues: {\n          description: \"Candidate image uploaded using Pinata\"\n        }\n      });\n      formData.append(\"pinataMetadata\", metadata);\n      formData.append(\"pinataOptions\", JSON.stringify({\n        cidVersion: 1\n      }));\n      const result = await axios.post(\"https://api.pinata.cloud/pinning/pinFileToIPFS\", formData, {\n        maxBodyLength: \"Infinity\",\n        headers: {\n          \"Content-Type\": `multipart/form-data; boundary=${formData._boundary}`,\n          pinata_api_key: pinataApiKey,\n          pinata_secret_api_key: pinataSecretApiKey\n        }\n      });\n      const imageUrl = `https://gateway.pinata.cloud/ipfs/${result.data.IpfsHash}`;\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      await provider.send(\"eth_requestAccounts\", []);\n      const signer = provider.getSigner();\n      const contractInstance = new ethers.Contract(contractAddress, contractAbi, signer);\n      const tx = await contractInstance.addCandidate(newCandidateName, imageUrl);\n      await tx.wait();\n      getCandidates();\n    } catch (error) {\n      console.error(\"Error uploading image to Pinata:\", error);\n      alert(\"Failed to upload image to Pinata\");\n    }\n  }\n  async function checkIfCanVote() {\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    await provider.send(\"eth_requestAccounts\", []);\n    const signer = provider.getSigner();\n    const contractInstance = new ethers.Contract(contractAddress, contractAbi, signer);\n    const voteStatus = await contractInstance.voters(await signer.getAddress());\n    setIsAllowedToVote(voteStatus);\n  }\n  async function checkIfAdmin() {\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    await provider.send(\"eth_requestAccounts\", []);\n    const signer = provider.getSigner();\n    const contractInstance = new ethers.Contract(contractAddress, contractAbi, signer);\n    const adminStatus = await contractInstance.isAdmin(await signer.getAddress());\n    setIsAdmin(adminStatus);\n  }\n  async function getCandidates() {\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    await provider.send(\"eth_requestAccounts\", []);\n    const signer = provider.getSigner();\n    const contractInstance = new ethers.Contract(contractAddress, contractAbi, signer);\n    const candidatesList = await contractInstance.getAllVotesOfCandidates();\n    const formattedCandidates = candidatesList.map((candidate, index) => {\n      return {\n        index: index,\n        name: candidate.name,\n        voteCount: candidate.voteCount.toNumber(),\n        image: candidate.image\n      };\n    });\n    setCandidates(formattedCandidates);\n  }\n  async function getCurrentStatus() {\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    await provider.send(\"eth_requestAccounts\", []);\n    const signer = provider.getSigner();\n    const contractInstance = new ethers.Contract(contractAddress, contractAbi, signer);\n    const status = await contractInstance.getVotingStatus();\n    setVotingStatus(status);\n  }\n  async function getRemainingTime() {\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    await provider.send(\"eth_requestAccounts\", []);\n    const signer = provider.getSigner();\n    const contractInstance = new ethers.Contract(contractAddress, contractAbi, signer);\n    const time = await contractInstance.getRemainingTime();\n    setRemainingTime(parseInt(time, 16));\n  }\n  function handleAccountsChanged(accounts) {\n    if (accounts.length > 0 && account !== accounts[0]) {\n      setAccount(accounts[0]);\n      checkIfCanVote();\n      checkIfAdmin();\n    } else {\n      setIsConnected(false);\n      setAccount(null);\n    }\n  }\n  async function connectToMetamask() {\n    if (window.ethereum) {\n      try {\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\n        setProvider(provider);\n        await provider.send(\"eth_requestAccounts\", []);\n        const signer = provider.getSigner();\n        const address = await signer.getAddress();\n        setAccount(address);\n        setIsConnected(true);\n        checkIfCanVote();\n        checkIfAdmin();\n      } catch (err) {\n        console.error(err);\n      }\n    } else {\n      console.error(\"Metamask is not detected in the browser\");\n    }\n  }\n  function handleNumberChange(e) {\n    setNumber(e.target.value);\n  }\n  function handleNewCandidateChange(e) {\n    setNewCandidateName(e.target.value);\n  }\n  function handleNewCandidateImageChange(e) {\n    setNewCandidateImage(e.target.files[0]);\n  }\n  function handleAddCandidateClick() {\n    if (isAdmin) {\n      setShowPopup(true);\n    } else {\n      alert(\"You are not authorized to add candidates.\");\n    }\n  }\n  function closePopup() {\n    setShowPopup(false);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: votingStatus ? isConnected ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Connected, {\n        account: account,\n        candidates: candidates,\n        remainingTime: remainingTime,\n        number: number,\n        handleNumberChange: handleNumberChange,\n        voteFunction: vote,\n        showButton: isAllowedToVote\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"add-candidate-button\",\n        onClick: handleAddCandidateClick,\n        children: \"Add Candidate\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 25\n      }, this), showPopup && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"popup\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"popup-inner\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Add New Candidate\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 230,\n            columnNumber: 37\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: newCandidateName,\n            onChange: handleNewCandidateChange,\n            placeholder: \"Candidate Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 231,\n            columnNumber: 37\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"file\",\n            onChange: handleNewCandidateImageChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 237,\n            columnNumber: 37\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: addCandidate,\n            children: \"Submit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 238,\n            columnNumber: 37\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: closePopup,\n            children: \"Close\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 239,\n            columnNumber: 37\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 229,\n          columnNumber: 33\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 29\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 21\n    }, this) : /*#__PURE__*/_jsxDEV(Login, {\n      connectWallet: connectToMetamask\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 21\n    }, this) : /*#__PURE__*/_jsxDEV(Finished, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 211,\n    columnNumber: 9\n  }, this);\n}\n_s(App, \"WBXz9D502dVb7TreaJIbBIfeQMI=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","axios","ethers","contractAbi","contractAddress","Login","Finished","Connected","jsxDEV","_jsxDEV","pinataApiKey","pinataSecretApiKey","App","_s","provider","setProvider","account","setAccount","isConnected","setIsConnected","votingStatus","setVotingStatus","remainingTime","setRemainingTime","candidates","setCandidates","number","setNumber","isAllowedToVote","setIsAllowedToVote","isAdmin","setIsAdmin","showPopup","setShowPopup","newCandidateName","setNewCandidateName","newCandidateImage","setNewCandidateImage","getCandidates","getRemainingTime","getCurrentStatus","checkIfAdmin","window","ethereum","on","handleAccountsChanged","removeListener","vote","candidateIndex","providers","Web3Provider","send","signer","getSigner","contractInstance","Contract","tx","wait","checkIfCanVote","addCandidate","alert","formData","FormData","append","metadata","JSON","stringify","name","keyvalues","description","cidVersion","result","post","maxBodyLength","headers","_boundary","pinata_api_key","pinata_secret_api_key","imageUrl","data","IpfsHash","error","console","voteStatus","voters","getAddress","adminStatus","candidatesList","getAllVotesOfCandidates","formattedCandidates","map","candidate","index","voteCount","toNumber","image","status","getVotingStatus","time","parseInt","accounts","length","connectToMetamask","address","err","handleNumberChange","e","target","value","handleNewCandidateChange","handleNewCandidateImageChange","files","handleAddCandidateClick","closePopup","className","children","voteFunction","showButton","fileName","_jsxFileName","lineNumber","columnNumber","onClick","type","onChange","placeholder","connectWallet","_c","$RefreshReg$"],"sources":["C:/voting_appv1/voting_app/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { ethers } from \"ethers\";\nimport { contractAbi, contractAddress } from \"./Constant/constant\";\nimport Login from \"./Components/Login\";\nimport Finished from \"./Components/Finished\";\nimport Connected from \"./Components/Connected\";\nimport \"./App.css\";\n\nconst pinataApiKey = \"de27f723de47dc491f1c\";\nconst pinataSecretApiKey = \"e01beeb95d3172c3bac68b551f812d6649063ab581b42dc1040e0048f78496ee\";\n\nfunction App() {\n    const [provider, setProvider] = useState(null);\n    const [account, setAccount] = useState(null);\n    const [isConnected, setIsConnected] = useState(false);\n    const [votingStatus, setVotingStatus] = useState(true);\n    const [remainingTime, setRemainingTime] = useState(\"\");\n    const [candidates, setCandidates] = useState([]);\n    const [number, setNumber] = useState(\"\");\n    const [isAllowedToVote, setIsAllowedToVote] = useState(true);\n    const [isAdmin, setIsAdmin] = useState(false);\n    const [showPopup, setShowPopup] = useState(false);\n    const [newCandidateName, setNewCandidateName] = useState(\"\");\n    const [newCandidateImage, setNewCandidateImage] = useState(null);\n\n    useEffect(() => {\n        getCandidates();\n        getRemainingTime();\n        getCurrentStatus();\n        checkIfAdmin();\n        if (window.ethereum) {\n            window.ethereum.on(\"accountsChanged\", handleAccountsChanged);\n        }\n\n        return () => {\n            if (window.ethereum) {\n                window.ethereum.removeListener(\"accountsChanged\", handleAccountsChanged);\n            }\n        };\n    }, []);\n\n    async function vote(candidateIndex) {\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\n        await provider.send(\"eth_requestAccounts\", []);\n        const signer = provider.getSigner();\n        const contractInstance = new ethers.Contract(contractAddress, contractAbi, signer);\n\n        const tx = await contractInstance.vote(candidateIndex);\n        await tx.wait();\n        checkIfCanVote();\n    }\n\n    async function addCandidate() {\n        if (!newCandidateName || !newCandidateImage) {\n            return alert(\"Please enter candidate name and select an image\");\n        }\n\n        try {\n            const formData = new FormData();\n            formData.append(\"file\", newCandidateImage);\n\n            const metadata = JSON.stringify({\n                name: newCandidateImage.name,\n                keyvalues: {\n                    description: \"Candidate image uploaded using Pinata\",\n                },\n            });\n\n            formData.append(\"pinataMetadata\", metadata);\n            formData.append(\"pinataOptions\", JSON.stringify({ cidVersion: 1 }));\n\n            const result = await axios.post(\n                \"https://api.pinata.cloud/pinning/pinFileToIPFS\",\n                formData,\n                {\n                    maxBodyLength: \"Infinity\",\n                    headers: {\n                        \"Content-Type\": `multipart/form-data; boundary=${formData._boundary}`,\n                        pinata_api_key: pinataApiKey,\n                        pinata_secret_api_key: pinataSecretApiKey,\n                    },\n                }\n            );\n\n            const imageUrl = `https://gateway.pinata.cloud/ipfs/${result.data.IpfsHash}`;\n\n            const provider = new ethers.providers.Web3Provider(window.ethereum);\n            await provider.send(\"eth_requestAccounts\", []);\n            const signer = provider.getSigner();\n            const contractInstance = new ethers.Contract(contractAddress, contractAbi, signer);\n\n            const tx = await contractInstance.addCandidate(newCandidateName, imageUrl);\n            await tx.wait();\n            getCandidates();\n        } catch (error) {\n            console.error(\"Error uploading image to Pinata:\", error);\n            alert(\"Failed to upload image to Pinata\");\n        }\n    }\n\n    async function checkIfCanVote() {\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\n        await provider.send(\"eth_requestAccounts\", []);\n        const signer = provider.getSigner();\n        const contractInstance = new ethers.Contract(contractAddress, contractAbi, signer);\n        const voteStatus = await contractInstance.voters(await signer.getAddress());\n        setIsAllowedToVote(voteStatus);\n    }\n\n    async function checkIfAdmin() {\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\n        await provider.send(\"eth_requestAccounts\", []);\n        const signer = provider.getSigner();\n        const contractInstance = new ethers.Contract(contractAddress, contractAbi, signer);\n        const adminStatus = await contractInstance.isAdmin(await signer.getAddress());\n        setIsAdmin(adminStatus);\n    }\n\n    async function getCandidates() {\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\n        await provider.send(\"eth_requestAccounts\", []);\n        const signer = provider.getSigner();\n        const contractInstance = new ethers.Contract(contractAddress, contractAbi, signer);\n        const candidatesList = await contractInstance.getAllVotesOfCandidates();\n        const formattedCandidates = candidatesList.map((candidate, index) => {\n            return {\n                index: index,\n                name: candidate.name,\n                voteCount: candidate.voteCount.toNumber(),\n                image: candidate.image,\n            };\n        });\n        setCandidates(formattedCandidates);\n    }\n\n    async function getCurrentStatus() {\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\n        await provider.send(\"eth_requestAccounts\", []);\n        const signer = provider.getSigner();\n        const contractInstance = new ethers.Contract(contractAddress, contractAbi, signer);\n        const status = await contractInstance.getVotingStatus();\n        setVotingStatus(status);\n    }\n\n    async function getRemainingTime() {\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\n        await provider.send(\"eth_requestAccounts\", []);\n        const signer = provider.getSigner();\n        const contractInstance = new ethers.Contract(contractAddress, contractAbi, signer);\n        const time = await contractInstance.getRemainingTime();\n        setRemainingTime(parseInt(time, 16));\n    }\n\n    function handleAccountsChanged(accounts) {\n        if (accounts.length > 0 && account !== accounts[0]) {\n            setAccount(accounts[0]);\n            checkIfCanVote();\n            checkIfAdmin();\n        } else {\n            setIsConnected(false);\n            setAccount(null);\n        }\n    }\n\n    async function connectToMetamask() {\n        if (window.ethereum) {\n            try {\n                const provider = new ethers.providers.Web3Provider(window.ethereum);\n                setProvider(provider);\n                await provider.send(\"eth_requestAccounts\", []);\n                const signer = provider.getSigner();\n                const address = await signer.getAddress();\n                setAccount(address);\n                setIsConnected(true);\n                checkIfCanVote();\n                checkIfAdmin();\n            } catch (err) {\n                console.error(err);\n            }\n        } else {\n            console.error(\"Metamask is not detected in the browser\");\n        }\n    }\n\n    function handleNumberChange(e) {\n        setNumber(e.target.value);\n    }\n\n    function handleNewCandidateChange(e) {\n        setNewCandidateName(e.target.value);\n    }\n\n    function handleNewCandidateImageChange(e) {\n        setNewCandidateImage(e.target.files[0]);\n    }\n\n    function handleAddCandidateClick() {\n        if (isAdmin) {\n            setShowPopup(true);\n        } else {\n            alert(\"You are not authorized to add candidates.\");\n        }\n    }\n\n    function closePopup() {\n        setShowPopup(false);\n    }\n\n    return (\n        <div className=\"app\">\n            {votingStatus ? (\n                isConnected ? (\n                    <div>\n                        <Connected\n                            account={account}\n                            candidates={candidates}\n                            remainingTime={remainingTime}\n                            number={number}\n                            handleNumberChange={handleNumberChange}\n                            voteFunction={vote}\n                            showButton={isAllowedToVote}\n                        />\n                        <button className=\"add-candidate-button\" onClick={handleAddCandidateClick}>\n                            Add Candidate\n                        </button>\n                        {showPopup && (\n                            <div className=\"popup\">\n                                <div className=\"popup-inner\">\n                                    <h2>Add New Candidate</h2>\n                                    <input\n                                        type=\"text\"\n                                        value={newCandidateName}\n                                        onChange={handleNewCandidateChange}\n                                        placeholder=\"Candidate Name\"\n                                    />\n                                    <input type=\"file\" onChange={handleNewCandidateImageChange} />\n                                    <button onClick={addCandidate}>Submit</button>\n                                    <button onClick={closePopup}>Close</button>\n                                </div>\n                            </div>\n                        )}\n                    </div>\n                ) : (\n                    <Login connectWallet={connectToMetamask} />\n                )\n            ) : (\n                <Finished />\n            )}\n        </div>\n    );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}