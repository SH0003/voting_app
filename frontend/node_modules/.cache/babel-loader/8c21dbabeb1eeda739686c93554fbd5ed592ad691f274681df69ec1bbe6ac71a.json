{"ast":null,"code":"var _jsxFileName = \"/home/abdelilah/Downloads/voting_app/frontend/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { ethers } from \"ethers\";\nimport { contractAbi, contractAddress } from \"./Constant/constant\";\nimport Login from \"./Components/Login\";\nimport Finished from \"./Components/Finished\";\nimport Connected from \"./Components/Connected\";\nimport CreateVotingSession from \"./Components/CreateVotingSession\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst pinataApiKey = \"05736c0a0d1c571646de\";\nconst pinataSecretApiKey = \"02bdcec6b007d71e8749ca40592858f465a33a76939b1b9d5bf2027ae9f3fc6f\";\nfunction App() {\n  _s();\n  const [provider, setProvider] = useState(null);\n  const [account, setAccount] = useState(null);\n  const [isConnected, setIsConnected] = useState(false);\n  const [votingStatus, setVotingStatus] = useState(true);\n  const [remainingTime, setRemainingTime] = useState(\"\");\n  const [candidates, setCandidates] = useState([]);\n  const [number, setNumber] = useState(\"\");\n  const [isAllowedToVote, setIsAllowedToVote] = useState(true);\n  const [newCandidateName, setNewCandidateName] = useState(\"\");\n  const [newCandidateImage, setNewCandidateImage] = useState(null);\n  useEffect(() => {\n    getCandidates();\n    getRemainingTime();\n    getCurrentStatus();\n    if (window.ethereum) {\n      window.ethereum.on(\"accountsChanged\", handleAccountsChanged);\n    }\n    return () => {\n      if (window.ethereum) {\n        window.ethereum.removeListener(\"accountsChanged\", handleAccountsChanged);\n      }\n    };\n  }, []);\n  async function vote() {\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    await provider.send(\"eth_requestAccounts\", []);\n    const signer = provider.getSigner();\n    const contractInstance = new ethers.Contract(contractAddress, contractAbi, signer);\n    const tx = await contractInstance.vote(number);\n    await tx.wait();\n    checkIfCanVote();\n  }\n  async function addCandidate() {\n    if (!newCandidateName || !newCandidateImage) {\n      return alert(\"Please enter candidate name and select an image\");\n    }\n    try {\n      const formData = new FormData();\n      formData.append(\"file\", newCandidateImage);\n      const metadata = JSON.stringify({\n        name: newCandidateImage.name,\n        keyvalues: {\n          description: \"Candidate image uploaded using Pinata\"\n        }\n      });\n      formData.append(\"pinataMetadata\", metadata);\n      formData.append(\"pinataOptions\", JSON.stringify({\n        cidVersion: 1\n      }));\n      const result = await axios.post(\"https://api.pinata.cloud/pinning/pinFileToIPFS\", formData, {\n        maxBodyLength: \"Infinity\",\n        headers: {\n          \"Content-Type\": `multipart/form-data; boundary=${formData._boundary}`,\n          pinata_api_key: pinataApiKey,\n          pinata_secret_api_key: pinataSecretApiKey\n        }\n      });\n      const imageUrl = `https://gateway.pinata.cloud/ipfs/${result.data.IpfsHash}`;\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      await provider.send(\"eth_requestAccounts\", []);\n      const signer = provider.getSigner();\n      const contractInstance = new ethers.Contract(contractAddress, contractAbi, signer);\n      const tx = await contractInstance.addCandidate(0, newCandidateName, imageUrl); // Assume session 0 for example\n      await tx.wait();\n      getCandidates();\n    } catch (error) {\n      console.error(\"Error uploading image to Pinata:\", error);\n      alert(\"Failed to upload image to Pinata\");\n    }\n  }\n  async function checkIfCanVote() {\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    await provider.send(\"eth_requestAccounts\", []);\n    const signer = provider.getSigner();\n    const contractInstance = new ethers.Contract(contractAddress, contractAbi, signer);\n    const voteStatus = await contractInstance.voters(await signer.getAddress());\n    setIsAllowedToVote(voteStatus);\n  }\n  async function getCandidates() {\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    await provider.send(\"eth_requestAccounts\", []);\n    const signer = provider.getSigner();\n    const contractInstance = new ethers.Contract(contractAddress, contractAbi, signer);\n    const candidatesList = await contractInstance.getCandidates(0); // Assume session 0 for example\n    const formattedCandidates = candidatesList.map((candidate, index) => {\n      return {\n        index: index,\n        name: candidate.name,\n        voteCount: candidate.voteCount.toNumber(),\n        image: candidate.image\n      };\n    });\n    setCandidates(formattedCandidates);\n  }\n  async function getCurrentStatus() {\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    await provider.send(\"eth_requestAccounts\", []);\n    const signer = provider.getSigner();\n    const contractInstance = new ethers.Contract(contractAddress, contractAbi, signer);\n    const status = await contractInstance.getVotingStatus(0); // Assume session 0 for example\n    setVotingStatus(status);\n  }\n  async function getRemainingTime() {\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    await provider.send(\"eth_requestAccounts\", []);\n    const signer = provider.getSigner();\n    const contractInstance = new ethers.Contract(contractAddress, contractAbi, signer);\n    const time = await contractInstance.getRemainingTime(0); // Assume session 0 for example\n    setRemainingTime(parseInt(time, 16));\n  }\n  function handleAccountsChanged(accounts) {\n    if (accounts.length > 0 && account !== accounts[0]) {\n      setAccount(accounts[0]);\n      checkIfCanVote();\n    } else {\n      setIsConnected(false);\n      setAccount(null);\n    }\n  }\n  async function connectToMetamask() {\n    if (window.ethereum) {\n      try {\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\n        setProvider(provider);\n        await provider.send(\"eth_requestAccounts\", []);\n        const signer = provider.getSigner();\n        const address = await signer.getAddress();\n        setAccount(address);\n        setIsConnected(true);\n        checkIfCanVote();\n      } catch (err) {\n        console.error(err);\n      }\n    } else {\n      console.error(\"Metamask is not detected in the browser\");\n    }\n  }\n  function handleNumberChange(e) {\n    setNumber(e.target.value);\n  }\n  function handleNewCandidateChange(e) {\n    setNewCandidateName(e.target.value);\n  }\n  function handleNewCandidateImageChange(e) {\n    setNewCandidateImage(e.target.files[0]);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(CreateVotingSession, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 7\n    }, this), votingStatus ? isConnected ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Connected, {\n        account: account,\n        candidates: candidates,\n        remainingTime: remainingTime,\n        number: number,\n        handleNumberChange: handleNumberChange,\n        voteFunction: vote,\n        showButton: isAllowedToVote\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(AddCandidate, {\n        addCandidate: addCandidate,\n        newCandidateName: newCandidateName,\n        handleNewCandidateChange: handleNewCandidateChange,\n        handleNewCandidateImageChange: handleNewCandidateImageChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 11\n    }, this) : /*#__PURE__*/_jsxDEV(Login, {\n      connectWallet: connectToMetamask\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 11\n    }, this) : /*#__PURE__*/_jsxDEV(Finished, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 218,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"l1m6TzCifTyXSobks6z656ykCWg=\");\n_c = App;\nfunction AddCandidate(_ref) {\n  let {\n    addCandidate,\n    newCandidateName,\n    handleNewCandidateChange,\n    handleNewCandidateImageChange\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: newCandidateName,\n      onChange: handleNewCandidateChange,\n      placeholder: \"Candidate Name\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      onChange: handleNewCandidateImageChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 263,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: addCandidate,\n      children: \"Add Candidate\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 264,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 256,\n    columnNumber: 5\n  }, this);\n}\n_c2 = AddCandidate;\nexport default App;\nvar _c, _c2;\n$RefreshReg$(_c, \"App\");\n$RefreshReg$(_c2, \"AddCandidate\");","map":{"version":3,"names":["React","useState","useEffect","axios","ethers","contractAbi","contractAddress","Login","Finished","Connected","CreateVotingSession","jsxDEV","_jsxDEV","pinataApiKey","pinataSecretApiKey","App","_s","provider","setProvider","account","setAccount","isConnected","setIsConnected","votingStatus","setVotingStatus","remainingTime","setRemainingTime","candidates","setCandidates","number","setNumber","isAllowedToVote","setIsAllowedToVote","newCandidateName","setNewCandidateName","newCandidateImage","setNewCandidateImage","getCandidates","getRemainingTime","getCurrentStatus","window","ethereum","on","handleAccountsChanged","removeListener","vote","providers","Web3Provider","send","signer","getSigner","contractInstance","Contract","tx","wait","checkIfCanVote","addCandidate","alert","formData","FormData","append","metadata","JSON","stringify","name","keyvalues","description","cidVersion","result","post","maxBodyLength","headers","_boundary","pinata_api_key","pinata_secret_api_key","imageUrl","data","IpfsHash","error","console","voteStatus","voters","getAddress","candidatesList","formattedCandidates","map","candidate","index","voteCount","toNumber","image","status","getVotingStatus","time","parseInt","accounts","length","connectToMetamask","address","err","handleNumberChange","e","target","value","handleNewCandidateChange","handleNewCandidateImageChange","files","className","children","fileName","_jsxFileName","lineNumber","columnNumber","voteFunction","showButton","AddCandidate","connectWallet","_c","_ref","type","onChange","placeholder","onClick","_c2","$RefreshReg$"],"sources":["/home/abdelilah/Downloads/voting_app/frontend/src/App.js"],"sourcesContent":["import React, {useState, useEffect} from \"react\";\nimport axios from \"axios\";\nimport {ethers} from \"ethers\";\nimport {contractAbi, contractAddress} from \"./Constant/constant\";\nimport Login from \"./Components/Login\";\nimport Finished from \"./Components/Finished\";\nimport Connected from \"./Components/Connected\";\nimport CreateVotingSession from \"./Components/CreateVotingSession\";\nimport \"./App.css\";\n\nconst pinataApiKey = \"05736c0a0d1c571646de\";\nconst pinataSecretApiKey =\n  \"02bdcec6b007d71e8749ca40592858f465a33a76939b1b9d5bf2027ae9f3fc6f\";\n\nfunction App() {\n  const [provider, setProvider] = useState(null);\n  const [account, setAccount] = useState(null);\n  const [isConnected, setIsConnected] = useState(false);\n  const [votingStatus, setVotingStatus] = useState(true);\n  const [remainingTime, setRemainingTime] = useState(\"\");\n  const [candidates, setCandidates] = useState([]);\n  const [number, setNumber] = useState(\"\");\n  const [isAllowedToVote, setIsAllowedToVote] = useState(true);\n  const [newCandidateName, setNewCandidateName] = useState(\"\");\n  const [newCandidateImage, setNewCandidateImage] = useState(null);\n\n  useEffect(() => {\n    getCandidates();\n    getRemainingTime();\n    getCurrentStatus();\n    if (window.ethereum) {\n      window.ethereum.on(\"accountsChanged\", handleAccountsChanged);\n    }\n\n    return () => {\n      if (window.ethereum) {\n        window.ethereum.removeListener(\n          \"accountsChanged\",\n          handleAccountsChanged\n        );\n      }\n    };\n  }, []);\n\n  async function vote() {\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    await provider.send(\"eth_requestAccounts\", []);\n    const signer = provider.getSigner();\n    const contractInstance = new ethers.Contract(\n      contractAddress,\n      contractAbi,\n      signer\n    );\n\n    const tx = await contractInstance.vote(number);\n    await tx.wait();\n    checkIfCanVote();\n  }\n\n  async function addCandidate() {\n    if (!newCandidateName || !newCandidateImage) {\n      return alert(\"Please enter candidate name and select an image\");\n    }\n\n    try {\n      const formData = new FormData();\n      formData.append(\"file\", newCandidateImage);\n\n      const metadata = JSON.stringify({\n        name: newCandidateImage.name,\n        keyvalues: {\n          description: \"Candidate image uploaded using Pinata\",\n        },\n      });\n\n      formData.append(\"pinataMetadata\", metadata);\n      formData.append(\"pinataOptions\", JSON.stringify({cidVersion: 1}));\n\n      const result = await axios.post(\n        \"https://api.pinata.cloud/pinning/pinFileToIPFS\",\n        formData,\n        {\n          maxBodyLength: \"Infinity\",\n          headers: {\n            \"Content-Type\": `multipart/form-data; boundary=${formData._boundary}`,\n            pinata_api_key: pinataApiKey,\n            pinata_secret_api_key: pinataSecretApiKey,\n          },\n        }\n      );\n\n      const imageUrl = `https://gateway.pinata.cloud/ipfs/${result.data.IpfsHash}`;\n\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      await provider.send(\"eth_requestAccounts\", []);\n      const signer = provider.getSigner();\n      const contractInstance = new ethers.Contract(\n        contractAddress,\n        contractAbi,\n        signer\n      );\n\n      const tx = await contractInstance.addCandidate(\n        0,\n        newCandidateName,\n        imageUrl\n      ); // Assume session 0 for example\n      await tx.wait();\n      getCandidates();\n    } catch (error) {\n      console.error(\"Error uploading image to Pinata:\", error);\n      alert(\"Failed to upload image to Pinata\");\n    }\n  }\n\n  async function checkIfCanVote() {\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    await provider.send(\"eth_requestAccounts\", []);\n    const signer = provider.getSigner();\n    const contractInstance = new ethers.Contract(\n      contractAddress,\n      contractAbi,\n      signer\n    );\n    const voteStatus = await contractInstance.voters(await signer.getAddress());\n    setIsAllowedToVote(voteStatus);\n  }\n\n  async function getCandidates() {\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    await provider.send(\"eth_requestAccounts\", []);\n    const signer = provider.getSigner();\n    const contractInstance = new ethers.Contract(\n      contractAddress,\n      contractAbi,\n      signer\n    );\n    const candidatesList = await contractInstance.getCandidates(0); // Assume session 0 for example\n    const formattedCandidates = candidatesList.map((candidate, index) => {\n      return {\n        index: index,\n        name: candidate.name,\n        voteCount: candidate.voteCount.toNumber(),\n        image: candidate.image,\n      };\n    });\n    setCandidates(formattedCandidates);\n  }\n\n  async function getCurrentStatus() {\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    await provider.send(\"eth_requestAccounts\", []);\n    const signer = provider.getSigner();\n    const contractInstance = new ethers.Contract(\n      contractAddress,\n      contractAbi,\n      signer\n    );\n    const status = await contractInstance.getVotingStatus(0); // Assume session 0 for example\n    setVotingStatus(status);\n  }\n\n  async function getRemainingTime() {\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    await provider.send(\"eth_requestAccounts\", []);\n    const signer = provider.getSigner();\n    const contractInstance = new ethers.Contract(\n      contractAddress,\n      contractAbi,\n      signer\n    );\n    const time = await contractInstance.getRemainingTime(0); // Assume session 0 for example\n    setRemainingTime(parseInt(time, 16));\n  }\n\n  function handleAccountsChanged(accounts) {\n    if (accounts.length > 0 && account !== accounts[0]) {\n      setAccount(accounts[0]);\n      checkIfCanVote();\n    } else {\n      setIsConnected(false);\n      setAccount(null);\n    }\n  }\n\n  async function connectToMetamask() {\n    if (window.ethereum) {\n      try {\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\n        setProvider(provider);\n        await provider.send(\"eth_requestAccounts\", []);\n        const signer = provider.getSigner();\n        const address = await signer.getAddress();\n        setAccount(address);\n        setIsConnected(true);\n        checkIfCanVote();\n      } catch (err) {\n        console.error(err);\n      }\n    } else {\n      console.error(\"Metamask is not detected in the browser\");\n    }\n  }\n\n  function handleNumberChange(e) {\n    setNumber(e.target.value);\n  }\n\n  function handleNewCandidateChange(e) {\n    setNewCandidateName(e.target.value);\n  }\n\n  function handleNewCandidateImageChange(e) {\n    setNewCandidateImage(e.target.files[0]);\n  }\n\n  return (\n    <div className=\"app\">\n      <CreateVotingSession />\n      {votingStatus ? (\n        isConnected ? (\n          <div>\n            <Connected\n              account={account}\n              candidates={candidates}\n              remainingTime={remainingTime}\n              number={number}\n              handleNumberChange={handleNumberChange}\n              voteFunction={vote}\n              showButton={isAllowedToVote}\n            />\n            <AddCandidate\n              addCandidate={addCandidate}\n              newCandidateName={newCandidateName}\n              handleNewCandidateChange={handleNewCandidateChange}\n              handleNewCandidateImageChange={handleNewCandidateImageChange}\n            />\n          </div>\n        ) : (\n          <Login connectWallet={connectToMetamask} />\n        )\n      ) : (\n        <Finished />\n      )}\n    </div>\n  );\n}\n\nfunction AddCandidate({\n  addCandidate,\n  newCandidateName,\n  handleNewCandidateChange,\n  handleNewCandidateImageChange,\n}) {\n  return (\n    <div className=\"\">\n      <input\n        type=\"text\"\n        value={newCandidateName}\n        onChange={handleNewCandidateChange}\n        placeholder=\"Candidate Name\"\n      />\n      <input type=\"file\" onChange={handleNewCandidateImageChange} />\n      <button onClick={addCandidate}>Add Candidate</button>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}